.aa-page-header id="content"
  .container
    .row
      .col-xs-7
        h1
          = @location.name
        p
          = @location.description
      .col-xs-4.col-xs-offset-1
        - if @location.private?
          .privacy-sign
            i.glyphicon.glyphicon-lock
            span.text.hidden-xs
              = _("Private")
.container.aa-page-container

  .row
    .col-sm-12
      h3.page-header
        = _("Latest Readings")

  .row
    .col-xs-12.aa-block-wrapper
      div.aa-reading-block data-location-id=@location.id

  .row
    .col-xs-12.aa-block-wrapper
      div.aa-outdoor-reading-block data-location="beijing"

  .row
    .col-xs-12.aa-block-wrapper
      div.aa-outdoor-reading-block data-location="shanghai"

  = render 'shared/legend'

  .row
    .col-sm-12
      h4
        = _("PM 2.5 24 Hour Outlook")
      .pull-right
        .btn-group data-toggle="tooltip" data-placement="top" title=_("Other Intervals Coming Soon")
          .btn.btn-default disabled="disabled"
            = _("Past hour")
          .btn.btn-default.active
            = _("Past day")
          .btn.btn-default disabled="disabled"
            = _("Past week")
      #chartContainer

- content_for :bottom do
  javascript:
    var location_id = #{ raw @location.id }
    var r = new AirAware.Models.Reading(#{raw @last_reading.to_json})
    var readings = new AirAware.Collections.Readings(#{raw @readings.to_json }, {location_id: #{raw @location.id}})

  coffee:

    setChart = (readings) ->
      width = $(".container > .row > .col-sm-12").width()
      $("#chartContainer").html("""
        <canvas id="myChart" width="#{width}" height="400"></canvas>
      """)

      #Get context with jQuery - using jQuery's .get() method.
      unless $("#myChart").get(0).getContext
        G_vmlCanvasManager.initElement($("#myChart").get(0))
      ctx = $("#myChart").get(0).getContext("2d");

      times = _.map readings.models, (item) ->
        return item.get('reading_time');
      _.each times, (item, index) ->
        if parseInt(index/5)*5 == index
          time = AirAware.parseTime(item)
          times[index] = time.substring(0,time.length-3)
        else
          times[index] = ""

      pm2p5 = _.map readings.models, (item) ->
        return item.get('pm2p5');

      times.reverse()
      pm2p5.reverse()

      data = {
        labels : times,
        datasets : [
          {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            pointColor : "rgba(220,220,220,1)",
            pointStrokeColor : "#fff",
            data : pm2p5
          }
        ]
      }
      options = {
        animation: false,
        scaleOverride: true,
        scaleSteps : 10,
        #Number - The value jump in the hard coded scale

        scaleStepWidth : 10*Math.ceil(0.1*Math.ceil(_.max(pm2p5)/7.5)),
        #Number - The scale starting value
        scaleStartValue : 0,
        pointDot: false,
      }
      myChart = new Chart(ctx).Line(data, options);

    ## END OF SET CHART

    # Initialize chart
    setChart(readings)

    ## RESIZE AND RESTART CHART ON WINDOW RESIZE
    throttled_set_chart = _.throttle setChart, 500
    $(window).on "resize", () ->
      throttled_set_chart(readings)

    ## Set it to poll and update the data of the chart
    chart_display_ids = _.map readings.models, (item) -> return item.id

    setInterval () ->
      readings.fetch().success () ->
        ## Push the new data to the chart, if there is new
        new_ids = _.map readings.models, (item) -> return item.id
        if chart_display_ids != new_ids
          throttled_set_chart(readings)
          chart_display_ids = new_ids
    , 30000
