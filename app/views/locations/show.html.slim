.aa-page-header id="content"
  .container
    h1
      = @location.name
    p
      = @location.description

.container.aa-page-container

  .row
    .col-sm-12
      h3.page-header
        = "Indoor Air Monitoring for Schools"

  #mainReading.location-container
    .row
      .cc-col.cc-col-6
        .location-title
          = "SCIS Indoor"
      .cc-col.cc-col-6
        = render 'shared/reading_block', :value => @last_reading.pm2p5, :label => "PM 2.5", :class_name => "big-reading", :units => "(μg/m³)"
    .row
      .readings-secondrow-container
        .cc-col.cc-col-20p
          = render 'shared/reading_block', :value => @last_reading.temperature, :label => "Temperature", :units => "(°C)"
        .cc-col.cc-col-20p
          = render 'shared/reading_block', :value => @last_reading.humidity, :label => "Humidity", :units => "(%)"
        .cc-col.cc-col-20p
          = render 'shared/reading_block', :value => @last_reading.tvoc, :label => "TVOC", :units => "(μg/m³)"
        .cc-col.cc-col-20p
          = render 'shared/reading_block', :value => @last_reading.hcho, :label => "HCHO", :units => "(μg/m³)"
        .cc-col.cc-col-20p
          = render 'shared/reading_block', :value => @last_reading.co2, :label => "CO2", :units => "(ppmv)"
      .col-sm-12
        .pull-right
          = @last_reading.reading_time.strftime("Last reading at: %H:%M:%S")
  #consulateReading.location-container
    = "Loading.."
  .row
    .col-sm-12
      h3.page-header
        = "Real Time Charts"
      h4
        = "Live PM 2.5 Readings"
      #chartContainer

  .row
    .col-sm-12
      .page-block
        h2
          = "Get AirAware"
        p
          = "AirAware will soon be launching at schools, offices, and homes around Shanghai."
        p
          = "Sign up to learn more."
        p
          = form_for SignUp.new do |f|
            .form-group
              = f.text_field :email, :class => "form-control", :placeholder => "email, phone, or qq"
            = f.submit "Sign up", :class => "btn btn-success"



- content_for :bottom do
  javascript:
    var r = new AirAware.Models.Reading(#{raw @last_reading.to_json})
    var readings = new AirAware.Collections.Readings(#{raw @readings.to_json }, {location_id: 1})

  coffee:
    setIndoorReading = (current_reading)->
      view = new AirAware.Views.Readings.Block model: current_reading
      $("#mainReading").html(view.render().el)

    setChart = (readings) ->
      width = $(".container > .row > .col-sm-12").width()
      $("#chartContainer").html("""
        <canvas id="myChart" width="#{width}" height="400"></canvas>
      """)

      #Get context with jQuery - using jQuery's .get() method.
      ctx = $("#myChart").get(0).getContext("2d");

      times = _.map readings.models, (item) ->
        return item.get('reading_time');
      _.each times, (item, index) ->
        if parseInt(index/5)*5 == index
          time = AirAware.parseTime(item)
          times[index] = time.substring(0,time.length-3)
        else
          times[index] = ""
      pm2p5 = _.map readings.models, (item) ->
        return item.get('pm2p5');

      data = {
        labels : times,
        datasets : [
          {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            pointColor : "rgba(220,220,220,1)",
            pointStrokeColor : "#fff",
            data : pm2p5
          }
        ]
      }

      options = {
        animation: false,
        scaleOverride: true,
        scaleSteps : 10,
        #Number - The value jump in the hard coded scale
        scaleStepWidth : 10*parseInt(0.1*parseInt(_.max(pm2p5)/7.5)),
        #Number - The scale starting value
        scaleStartValue : 0,
        pointDot: false,
      }
      myChart = new Chart(ctx).Line(data, options);

    ## END OF SET CHART

    # Initialize chart
    setChart(readings)

    ## RESIZE AND RESTART CHART ON WINDOW RESIZE
    throttled_set = _.throttle setChart, 500

    $(window).on "resize", () ->
      throttled_set(readings)

    ## Set it to poll and update the data
    current_reading = r
    setIndoorReading(current_reading)
    chart_display_ids = _.map readings.models, (item) -> return item.id

    setInterval () ->
      readings.fetch().success () ->
        ## Push the new data to the chart, if there is new
        new_ids = _.map readings.models, (item) -> return item.id
        if chart_display_ids != new_ids
          throttled_set(readings)
        ## Check to update the main readings data
        if new Date(readings.models[0].get('reading_time')).getTime() > new Date(current_reading.get('reading_time')).getTime()
          current_reading = readings.models[0]
          setIndoorReading(current_reading)
    , 30000

    ## GET and SET U.S. Consulate Data
    setUSData = () ->
      payload = {
        url: "/readings/us_consulate.xml",
        dataType: 'xml',
        type: 'get',
      };
      $.ajax(payload).success (data) ->
        response = $.xml2json(data)
        air_data = response.channel.item
        last_reading = air_data[0]
        model = new AirAware.Models.Reading {pm2p5: last_reading.Conc, reading_time: last_reading.ReadingDateTime, usdata: true}
        view = new AirAware.Views.Readings.Block model: model
        $("#consulateReading").html(view.render().el)
    setUSData()
    setInterval () ->
      setUSData()
    , 90000
