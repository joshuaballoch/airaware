.aa-page-header id="content"
  .container
    .row
      .col-xs-7
        h1
          = @location.name
        p
          = @location.description
      .col-xs-4.col-xs-offset-1
        - if @location.private?
          .privacy-sign
            i.glyphicon.glyphicon-lock
            span.text.hidden-xs
              = _("Private")
.container.aa-page-container

  .row
    .col-sm-12
      h3.page-header
        = _("Latest Readings")

  #mainReading.location-container
    = render 'shared/reading_hud', :reading => @last_reading

  .row
    .col-xs-12
      .dropdown.pull-right style="margin-bottom:10px;" data-toggle="tooltip" data-placement="top" data-title=_("Outdoor air can be reported on-site or from nearby stations")
        .btn.btn-default data-toggle="dropdown" href="#"
          = _("Beijing Outdoor")
          = " "
          b.caret
        ul.dropdown-menu role="menu" aria-labelledby="dLabel"
          li
            a href="javascript:void(0)"
              = _("Beijing Outdoor")

  #consulateReading-beijing.location-container
    = _("Loading..")

  .row
    .col-xs-12
      .dropdown.pull-right style="margin-bottom:10px;" data-toggle="tooltip" data-placement="top" data-title=_("Outdoor air can be reported on-site or from nearby stations")
        .btn.btn-default data-toggle="dropdown" href="#"
          = _("Shanghai Outdoor")
          = " "
          b.caret
        ul.dropdown-menu role="menu" aria-labelledby="dLabel"
          li
            a href="javascript:void(0)"
              = _("Shanghai Outdoor")

  #consulateReading-shanghai.location-container
    = _("Loading..")

  = render 'shared/legend'

  .row
    .col-sm-12
      h4
        = _("PM 2.5 24 Hour Outlook")
      .pull-right
        .btn-group data-toggle="tooltip" data-placement="top" title=_("Other Intervals Coming Soon")
          .btn.btn-default disabled="disabled"
            = _("Past hour")
          .btn.btn-default.active
            = _("Past day")
          .btn.btn-default disabled="disabled"
            = _("Past week")
      #chartContainer

- content_for :bottom do
  javascript:
    var location_id = #{ raw @location.id }
    var r = new AirAware.Models.Reading(#{raw @last_reading.to_json})
    var readings = new AirAware.Collections.Readings(#{raw @readings.to_json }, {location_id: #{raw @location.id}})

  coffee:
    setIndoorReading = (current_reading)->
      view = new AirAware.Views.Readings.Block model: current_reading
      $("#mainReading").html(view.render().el)

    ## Set it to poll and update the data
    current_reading = r
    setIndoorReading(current_reading)

    # Faster checking of latest reading
    setInterval () ->
      payload =
        url: "/locations/#{location_id}/readings/latest"
        dataType: "json"
        type: "GET"

      $.ajax(payload).success (data) ->
        ## Check to update the main readings data
        new_reading = new AirAware.Models.Reading(data)
        if new Date(new_reading.get('reading_time')).getTime() > new Date(current_reading.get('reading_time')).getTime()
          current_reading = new_reading
          setIndoorReading(current_reading)
    , 3000

    setChart = (readings) ->
      width = $(".container > .row > .col-sm-12").width()
      $("#chartContainer").html("""
        <canvas id="myChart" width="#{width}" height="400"></canvas>
      """)

      #Get context with jQuery - using jQuery's .get() method.
      unless $("#myChart").get(0).getContext
        G_vmlCanvasManager.initElement($("#myChart").get(0))
      ctx = $("#myChart").get(0).getContext("2d");

      times = _.map readings.models, (item) ->
        return item.get('reading_time');
      _.each times, (item, index) ->
        if parseInt(index/5)*5 == index
          time = AirAware.parseTime(item)
          times[index] = time.substring(0,time.length-3)
        else
          times[index] = ""

      pm2p5 = _.map readings.models, (item) ->
        return item.get('pm2p5');

      times.reverse()
      pm2p5.reverse()

      data = {
        labels : times,
        datasets : [
          {
            fillColor : "rgba(151,187,205,0.5)",
            strokeColor : "rgba(220,220,220,1)",
            pointColor : "rgba(220,220,220,1)",
            pointStrokeColor : "#fff",
            data : pm2p5
          }
        ]
      }
      options = {
        animation: false,
        scaleOverride: true,
        scaleSteps : 10,
        #Number - The value jump in the hard coded scale

        scaleStepWidth : 10*Math.ceil(0.1*Math.ceil(_.max(pm2p5)/7.5)),
        #Number - The scale starting value
        scaleStartValue : 0,
        pointDot: false,
      }
      myChart = new Chart(ctx).Line(data, options);

    ## END OF SET CHART

    # Initialize chart
    setChart(readings)

    ## RESIZE AND RESTART CHART ON WINDOW RESIZE
    throttled_set_chart = _.throttle setChart, 500
    $(window).on "resize", () ->
      throttled_set_chart(readings)

    ## Set it to poll and update the data of the chart
    chart_display_ids = _.map readings.models, (item) -> return item.id

    setInterval () ->
      readings.fetch().success () ->
        ## Push the new data to the chart, if there is new
        new_ids = _.map readings.models, (item) -> return item.id
        if chart_display_ids != new_ids
          throttled_set_chart(readings)
          chart_display_ids = new_ids
    , 30000

    ## GET and SET U.S. Consulate Data
    setUSData = (city) ->
      payload = {
        url: "/readings/us_consulate.xml",
        dataType: 'xml',
        type: 'get',
        data:
          city: city
      };
      $.ajax(payload).success (data) ->
        response = $.xml2json(data)
        air_data = response.channel.item
        last_reading = air_data[0]
        time_arr = last_reading.ReadingDateTime.match(/(\d{2})\/(\d{2})\/(\d{4}) (\d{1,2}):(\d{2}):(\d{2}) ([\D]{2})/)
        hours = time_arr[4]
        midi = time_arr[7]
        if midi == "PM" && parseInt(hours) != 12
          hours = "#{parseInt(hours)+12}"
        else if parseInt(hours) == 12
          hours == "00"
        hours = if "#{hours}".length < 2 then "0#{hours}" else "#{hours}"
        parsedTime = "#{time_arr[3]}-#{time_arr[1]}-#{time_arr[2]}T#{hours}:#{time_arr[5]}:#{time_arr[6]}Z"
        model = new AirAware.Models.Reading {pm2p5: last_reading.Conc, reading_time: parsedTime, usdata: true, city: city}
        view = new AirAware.Views.Readings.Block model: model
        $("#consulateReading-#{city}").html(view.render().el)

    setUSData('shanghai')
    setUSData('beijing')

    setInterval () ->
      setUSData('shanghai')
      setUSData('beijing')
    , 90000
